#! /usr/bin/env bash

### gitee

gt.org.create(){
    local BODY
    IFS='' read -r -d '' BODY <<A 
{
    "access_token": "$GT_TOKEN",
    "name": "$NAME",
    "org":"$NAME",
}
A
    gt.post "/v5/users/organization" "$BODY"
}

# gt.repo.enterprise.list(){
#     gt.get "/v5/enterprises/$ENTERPRISE/repo" "&type=all&page=1&per_page=20"
# }

gt.repo.enterprise.list(){
    local max_page
    max_page=$(gt.get.header "/v5/enterprises/$ENTERPRISE/repos" "&type=all&page=1&per_page=20" | grep "total_page" | cut -d ":" -f 2 | tr -d '\r')
    # max_page=$(cat c.txt | grep "total_page" | cut -d ":" -f 2 | tr -d '\r')
    for i in $(seq "$max_page"); do
        gt.get "/v5/enterprises/$ENTERPRISE/repos" "&type=all&page=$i&per_page=100" | jq -r ".[] | .full_name"
    done
}

gt.repo.organization.list(){
    local max_page
    max_page=$(gt.get.header "/v5/organizations/$ORGANIZATION/repos" "&type=all&page=1&per_page=20" | grep "total_page" | cut -d ":" -f 2 | tr -d '\r')
    # max_page=$(cat c.txt | grep "total_page" | cut -d ":" -f 2 | tr -d '\r')
    for i in $(seq "$max_page"); do
        gt.get "/v5/organizations/$ORGANIZATION/repos" "&type=all&page=$i&per_page=100" | jq -r ".[] | .full_name"
    done
}

GT_URL='https://gitee.com/api'

gt.post(){
    local url="$GT_URL${1:?Suburl}"
    echo "Visiting $url"
    curl -X POST --header 'Content-Type: application/json;charset=UTF-8' "$url" -d "${2:?-body}" 2>/dev/null

}

gt.get.header(){
    local url="$GT_URL${1:?Suburl}?access_token=$GT_TOKEN${2}"
    echo "Visiting $url" >&2
    curl -X GET -I --header 'Content-Type: application/json;charset=UTF-8' "$url" 2>/dev/null
}

gt.get(){
    local url="$GT_URL${1:?Suburl}"
    echo "Visiting $url" >&2
    curl -X GET --header 'Content-Type: application/json;charset=UTF-8' "$url?access_token=$GT_TOKEN${2}" #2>/dev/null
    # &type=all&page=1&per_page=20
}

# arguments NAME
gt.repo.user.create(){
    local BODY
    IFS='' read -r -d '' BODY <<TA
{
    "access_token": "$GT_TOKEN",
    "name": "$NAME",
    "has_issues":"true",
    "has_wiki":"true",
    "private":"true"
}
TA
    echo "hi: $BODY"
    gt.post "/v5/user/repos" "$BODY"
    local code=$?
    echo "code: $code"
    return $code
}

# ORGANIZATION NAME
gt.repo.organization.create(){
    local ORGANIZATION=${GROUP:?Provide organization name using GROUP environement variable}

    local BODY
    IFS='' read -r -d '' BODY <<TA
{
    "access_token": "$GT_TOKEN",
    "name": "$NAME",
    "has_issues":"true",
    "has_wiki":"true",
    "public":0,
    "org": "$ORGANIZATION"
}
TA
    echo "hi: $BODY"
    gt.post "/v5/orgs/${ORGANIZATION}/repos" "$BODY"
    local code=$?
    echo "code: $code"
    return $code
}

gt.repo.enterprise.create(){
    local ENTERPRISE=${GROUP:?Provide enterprise name using GROUP environement variable}

    local BODY
    IFS='' read -r -d '' BODY <<TA
{
    "access_token": "$GT_TOKEN",
    "name": "$NAME",
    "has_issues":"true",
    "has_wiki":"true",
    "private":0,
    "enterprise":"${ENTERPRISE}"
}
TA
    echo "hi: $BODY"
    gt.post "/v5/enterprises/${ENTERPRISE}/repos" "$BODY"
    local code=$?
    echo "code: $code"
    return $code
}

### github

sync(){
    local src_repo=$(echo ${1##*/} | cut -d '.' -f 1)
    # local tgt_repo=$(echo ${1##*/} | cut -d '.' -f 1)

    if [ -d "$src_repo" ]; then
        echo "git-pull: $src_repo" >&2
        ( cd "$src_repo" && git pull --all )
    else
        echo "git-clone: $src_repo" >&2
        git clone "$1"
    fi | grep -q "Already up to date"
    
    # if [ $? -eq 0 ]; then
    #     echo "=> !!!!!!!! No update"
    # else
    echo "ATTENTION!!! SYNC NOW" >&2
    pwd

    (
        if cd "$src_repo"; then
            # for remote in $(git branch -r | grep -v '\->' | grep -E "^ +origin"); do git branch --track "$remote"; done
            git branch -r | grep -v '\->' | grep -E "^ +origin" | while read remote; do git branch --track "${remote#origin/}" "$remote"; done
            git remote remove tgt >&2 # Just in case
            git remote add tgt "$2"
            # to prevent sync the empty repository
            ( git branch -r | grep -q ^ ) && (
                git fetch origin
                git pull origin
                git push -u --all tgt
                git push --tags tgt
            )
        else
            "BUG ATTENTION: cd fail!!!!" >&2
        fi
    )

}
